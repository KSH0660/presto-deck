from typing import Dict, List, Optional
from pydantic import BaseModel, Field
from app.models.types import QualityTier

# --- API Models ---


class GenerationConfig(BaseModel):
    """생성 과정을 제어하는 내부 설정 모델"""

    quality: QualityTier = QualityTier.DEFAULT
    ordered: bool = False  # 스트리밍 시 순서 보장 여부
    concurrency: int | None = None  # 동시 작업 수


class GenerateRequest(BaseModel):
    """프레젠테이션 생성을 위한 사용자 요청 모델"""

    user_prompt: str
    theme: Optional[str] = None
    color_preference: Optional[str] = None
    config: GenerationConfig = GenerationConfig()


# --- Data Models ---


# 1) 단계 A 결과: 덱 기획
class SlideSpec(BaseModel):
    slide_id: int
    title: str
    key_points: Optional[List[str]] = None  # bullet points
    numbers: Optional[Dict[str, float]] = None  # KPI/지표
    notes: Optional[str] = None
    section: Optional[str] = None
    layout_candidates: Optional[List[str]] = None


class DeckPlan(BaseModel):
    topic: str
    audience: str
    slides: List[SlideSpec]


# 2) 단계 B 결과: 후보 템플릿 선택 결과
class LayoutCandidates(BaseModel):
    """List of candidate template names"""

    candidates: List[str] = Field(description="List of candidate template names.")


# 3) 단계 B 결과: 최종 HTML
class SlideHTML(BaseModel):
    slide_id: int
    template_name: str
    html: str


class TemplateSummary(BaseModel):
    """Summary of a template's structure and use case, generated by an LLM."""

    summary: str = Field(
        description="A one-sentence summary of the template's structure and ideal use case."
    )


# --- API Requests for modular endpoints ---


class PlanRequest(BaseModel):
    """Request to plan a deck without rendering slides."""

    user_request: str
    config: GenerationConfig = GenerationConfig()


class RenderSlidesRequest(BaseModel):
    """Render a subset or all slides for a given deck plan."""

    deck_plan: DeckPlan
    # If omitted, render all slides in deck_plan.slides
    slides: Optional[List[SlideSpec]] = None
    # Mapping of slide_id to candidate template names
    candidate_map: Optional[Dict[int, List[str]]] = None
    config: GenerationConfig = GenerationConfig()


class PreviewSlideRequest(BaseModel):
    """Render a single slide preview."""

    deck_plan: DeckPlan
    # Provide either a full slide spec or just a slide_id within deck_plan
    slide: Optional[SlideSpec] = None
    slide_id: Optional[int] = None
    # Optional explicit candidate templates; if omitted, selector will pick
    candidate_templates: Optional[List[str]] = None
    config: GenerationConfig = GenerationConfig()
