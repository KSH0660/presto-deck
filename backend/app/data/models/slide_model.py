"""
SQLAlchemy model for Slide entity.
"""

from sqlalchemy import Column, String, Text, Integer, DateTime, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from datetime import datetime
import uuid

from app.data.models.base import Base
from app.data.models.slide_version_model import SlideVersionModel


class SlideModel(Base):
    __tablename__ = "slides"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    deck_id = Column(
        UUID(as_uuid=True), ForeignKey("decks.id"), nullable=False, index=True
    )
    order = Column(Integer, nullable=False)
    title = Column(String(500), nullable=False)
    content_outline = Column(Text, nullable=False)
    html_content = Column(Text, nullable=True)  # Generated by LLM
    presenter_notes = Column(Text, nullable=True)
    template_filename = Column(
        String(100), nullable=False
    )  # Changed from template_type
    current_version = Column(
        Integer, default=1, nullable=False
    )  # Track current version number
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, onupdate=datetime.utcnow)

    # Relationships
    deck = relationship("DeckModel", back_populates="slides")
    versions = relationship(
        "SlideVersionModel",
        back_populates="slide",
        cascade="all, delete-orphan",
        order_by="SlideVersionModel.version_no.desc()",
    )

    def get_current_snapshot(self) -> dict:
        """Get current slide state as snapshot data."""
        return {
            "title": self.title,
            "content_outline": self.content_outline,
            "html_content": self.html_content,
            "presenter_notes": self.presenter_notes,
            "template_filename": self.template_filename,
            "order": self.order,
        }

    def apply_snapshot(self, snapshot_data: dict) -> None:
        """Apply snapshot data to current slide."""
        self.title = snapshot_data.get("title", self.title)
        self.content_outline = snapshot_data.get(
            "content_outline", self.content_outline
        )
        self.html_content = snapshot_data.get("html_content", self.html_content)
        self.presenter_notes = snapshot_data.get(
            "presenter_notes", self.presenter_notes
        )
        self.template_filename = snapshot_data.get(
            "template_filename", self.template_filename
        )
        self.order = snapshot_data.get("order", self.order)
        self.updated_at = datetime.utcnow()

    def get_latest_version(self) -> SlideVersionModel:
        """Get the most recent version."""
        return self.versions[0] if self.versions else None

    def get_version(self, version_no: int) -> SlideVersionModel:
        """Get a specific version by number."""
        return next((v for v in self.versions if v.version_no == version_no), None)
